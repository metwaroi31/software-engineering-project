type Admin @model{
  id: ID!
  username: String! @unique
  password: String!
  user: [Message] @connection (keyName: "byAdmin", fields ["id"])
}

type Message @model{
 @key(name: "byUser", fields:["userID", "adminID"])
 @key(name: "byAdmin", fields:["adminID", "userID"])
 userID: ID!
 adminID: ID!
 user: User! @connection (fields: ["userID"])
 admin: Admin! @connection (fields: ["adminID"])
}

type User @model{
  id: ID!
  username: String! @unique
  password: String!
  fullname: String
  dob: DateTime
  gender: Gender
  email: String!
  phone: String!
  logindate: DateTime
  admin: [Message] @connection (keyName: "byUser" ,fields: ["id"])
  food: [FavoriteFood] @connection(keyName: "byUser", fields: ["id"] )
  meal: [Add] @connection(keyName: "byMeal", fields: ["id"])
}

enum Gender {
  Male
  Female
}

type Categories @model {
 id: ID!
 name: String!
}

type Food @model {
 id: ID!
 name: String!
 weight: Float!
 categoryID: ID!
 category: Categories! @connection (fields: ["categoryID"])
 user: [FavoriteFood] @connection(keyName: "byFood", fields: ["id"])
 meal: [FoodMeal] @connection(keyName: "byMeal", fields: ["id"])
 ingredient: [Ingredients] @connection(keyName: "byIngredient", fields: ["id"])
 macronutrient: [Macronutrients] @connection(keyName: "byMacronutrient", fields: ["id"])
 vitamin: [Vitamins] @connection(keyName: "byVitamin", fields: ["id"])

}

type FavoriteFood @model {
 @key(name: "byUser", fields:["userID", "foodID"])
 @key(name: "byFood", fields:["foodID", "userID"])
 userID: ID!
 foodID: ID!
 user: User! @connection (fields: ["userID"])
 food: Food! @connection (fields: ["foodID"])
}

type FoodMeal @model {
 @key(name: "byMeal", fields:["mealID", "foodID"])
 @key(name: "byFood", fields:["foodID", "mealID"])
 foodID: ID!
 mealID: ID!
 food: Food! @connection (fields: ["foodID"])
 meal: Meal! @connection (fields: ["mealID"])
}

type Meal @model {
 id: ID!
 name: String!
 calories: Int!
 food: [FoodMeal] @connection(keyName: "byFood", fields: ["id"])
 user: [Add] @connection(keyName: "byUser", fields: ["id"])
}

type Add @model {
 @key(name: "byMeal", fields:["mealID", "userID"])
 @key(name: "byUser", fields:["userID", "mealID"])
 mealID: ID!
 userID: ID!
 meal: Meal! @connection(fields: ["mealID"])
 user: User! @connection(fields: ["userID"])
}

type Ingredients @model {
 id: ID!
 name: String!
 isvegeterian: Isvegeterian!
 food: [Food] @connection(keyName: "byFood", fields: ["id"])
}

type IngredientsFood @model {
 @key(name: "byIngredient", fields:["ingredientID", "foodID"])
 @key(name: "byFood", fields:["foodID", "ingredientID"])
 ingredientID: ID!
 foodID: ID!
 ingredient: Ingredients! @connection(fields: ["ingredientID"])
 food: Food! @connection(fields: ["foodID"])
}

enum Isvegeterian {
 true
 false
}

type Macronutrients @model {
 id: ID!
 name: String!
 value: Float!
 unit: String!
 food: [Food] @connection(keyName: "byFood", fields: ["id"])
}

type MacronutrientsFood @model {
 @key(name: "byMacronutrient", fields:["macronutrientID", "foodID"])
 @key(name: "byFood", fields:["foodID", "macronutrientID"])
 macronutrientID: ID!
 foodID: ID!
 macronutrient: Macronutrients! @connection(fields: ["macronutrientID"])
 food: Food! @connection(fields: ["foodID"])
}

type Vitamins @model {
 id: ID!
 name: String!
 value: Float!
 unit: String!
 food: [Food] @connection(keyName: "byFood", fields: ["id"])
}

type VitaminsFood @model {
 @key(name: "byVitamin", fields:["vitaminID", "foodID"])
 @key(name: "byFood", fields:["foodID", "vitaminID"])
 vitaminID: ID!
 foodID: ID!
 vitamin: Vitamins! @connection(fields: ["vitaminID"])
 food: Food! @connection(fields: ["foodID"])
}
